}else{
require(pkg, character.only=T)
}
}
installifnot("chromswitch")
installifnot("DeepBlueR")
library(dplyr)
hclustfunc <- function(x, method = "complete", dmeth = "euclidean") {
hclust(dist(x, method = dmeth), method = method)
}
fit <- hclustfunc(JCM)
#### BEDtools R functions
bedTools.2in<-function(functionstring="/usr/local/bin/intersectBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2merge<-function(functionstring="/usr/local/bin/mergeBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2sort<-function(functionstring="/usr/local/bin/sortBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2closest<-function(functionstring="/usr/local/bin/closestBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2sub<-function(functionstring="/usr/local/bin/subtractBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
files <- dir("/Users/Adria/Desktop/bedtools/BF/BEDFILES/")
files <- files[grep(".bed", files)]
file_nam <- gsub("_core_K27ac_mnemonics.bed","",files)
roadmap <- list()
for(f in file_nam){
file <- read.table(paste0("/Users/Adria/Desktop/bedtools/BF/BEDFILES/",f,"_core_K27ac_mnemonics.bed"))
roadmap[[f]] <-filter(file, V1 == 'chr1') #filter by chr1, Active enhancer, active promoters, heterocromatin and polycomb repressed regions
roadmap[[f]] <- subset(roadmap[[f]], grepl(pattern = "(16_ReprPC)$", roadmap[[f]]$V4)) #Set of chromatin states
}
#|9_EnhA1|10_EnhA2|16_ReprPC|1_TssA
files <- dir("/Users/Adria/Desktop/bedtools/BF/BEDFILES/")
files <- files[grep(".bed", files)]
file_nam <- gsub("_core_K27ac_mnemonics.bed","",files)
roadmap <- list()
for(f in file_nam){
file <- read.table(paste0("/Users/Adria/Desktop/bedtools/BF/BEDFILES/",f,"_core_K27ac_mnemonics.bed"))
roadmap[[f]] <-filter(file, V1 == 'chr1') #filter by chr1, Active enhancer, active promoters, heterocromatin and polycomb repressed regions
roadmap[[f]] <- subset(roadmap[[f]], grepl(pattern = "(16_ReprPC)$", roadmap[[f]]$V4)) #Set of chromatin states
}
#|9_EnhA1|10_EnhA2|16_ReprPC|1_TssA
knitr::opts_chunk$set(echo = TRUE)
if (!require(BiocManager)) install.packages("BiocManager")
installifnot <- function (pkg){
if (!require(pkg, character.only=T)){
BiocManager::install(pkg)
}else{
require(pkg, character.only=T)
}
}
installifnot("chromswitch")
installifnot("DeepBlueR")
library(dplyr)
hclustfunc <- function(x, method = "complete", dmeth = "euclidean") {
hclust(dist(x, method = dmeth), method = method)
}
fit <- hclustfunc(JCM)
files <- dir("/home/adria/Escritorio/BEDFILES/")
files <- files[grep(".bed", files)]
file_nam <- gsub("_core_K27ac_mnemonics.bed","",files)
roadmap <- list()
for(f in file_nam){
file <- read.table(paste0("/home/adria/Escritorio/BEDFILES/",f,"_core_K27ac_mnemonics.bed"))
roadmap[[f]] <-filter(file, V1 == 'chr1') #filter by chr1, Active enhancer, active promoters, heterocromatin and polycomb repressed regions
roadmap[[f]] <- subset(roadmap[[f]], grepl(pattern = "(_Het|_EnhA1|_EnhA2|_ReprPC|_TssA)$", roadmap[[f]]$V4)) #Set of chromatin states
}
#### BEDtools R functions
bedTools.2in<-function(functionstring="/usr/bin/intersectBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2merge<-function(functionstring="/usr/bin/mergeBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2sort<-function(functionstring="/usr/bin/sortBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2closest<-function(functionstring="/usr/bin/closestBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2sub<-function(functionstring="/usr/bin/subtractBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
#roadmap$E003_18
#roadmap$E004_18
x<-bedTools.2in("/usr/bin/intersectBed",roadmap$E003_18, roadmap$E004_18)
#x
y1<-bedTools.2merge("/usr/bin/mergeBed",roadmap$E003_18)
#y1
y2<-bedTools.2merge("/usr/bin/mergeBed",roadmap$E004_18)
#y2
#Jaccard index =  intersect / (Union - intersection)
intersect <- (sum(x$V3) - sum(x$V2))
intersect
union <- (sum(y1$V3) - sum(y1$V2)) + (sum(y2$V3) - sum(y2$V2))
union
JI = intersect / (union - intersect)
print(paste("The jaccard index between samples R003 and R004 is: ",JI))
for(i in 1:98){
for (j in 1:98){
JCM[i,j] <- (1-JCM[i,j])
}
}
groups <- cutree(fit, k=18)
#groups <- cutree(fit, k=18)
# Get dendextend
install.packages('dendextend')
install.packages('dendextendRcpp')
library(dendextend)
#Jaccard index =  intersect / (Union - intersection)
jacIndexMatrix <- function(roadmap, file_nam){
design<-matrix(,nrow=98,ncol=98, byrow=F)
colnames(design)<-file_nam
rownames(design)<- file_nam
for (i in 1:length(roadmap)){
print(i)
for (j in 1:length(roadmap)){
print(j)
x<-bedTools.2in("/usr/bin/intersectBed",roadmap[i], roadmap[j])
y1<-bedTools.2merge("/usr/bin/mergeBed",roadmap[i])
y2<-bedTools.2merge("/usr/bin/mergeBed",roadmap[j])
intersect <- (sum(x$V3) - sum(x$V2))
union <- (sum(y1$V3) - sum(y1$V2)) + (sum(y2$V3) - sum(y2$V2))
JI = intersect / (union - intersect)
design[i,j] <- JI
}
}
return(design)
}
#Jaccard matrix
JCM <- jacIndexMatrix(roadmap, file_nam)
JCM
CSV.write('JCM.csv', JCM, append = TRUE)
write.csv(JCM,'JCM.csv', append = TRUE)
write.csv(JCM,'JCM.csv')
x<-read.csv("JCM.csv")
x
getwd()
a<-getwd()
setwd(a)
a<-getwd()
setwd(a)
R
a<-getwd()
setwd(a)
# then assuming you use R command-line shell from the terminal... ;^D
# example here for Ecol and window length equal to 100bp
GC_avg <- 50.79; # the whole genome average GC content
ZZ <- gzfile('stats/Ecol_genomegcanalysis_wlen100.tbl.gz');
GC_w100 <- read.table(ZZ, header=FALSE);
colnames(GC_w100) <- c("CHRid","NUCpos","GCpct");
summary(GC_w100)
#>        CHRid           NUCpos            GCpct
#>  NC_000913:92832   Min.   :     50   Min.   :15.00
#>                    1st Qu.:1160438   1st Qu.:47.00
#>                    Median :2320825   Median :52.00
#>                    Mean   :2320825   Mean   :50.79 (*)
#>                    3rd Qu.:3481212   3rd Qu.:56.00
#>                    Max.   :4641600   Max.   :78.00
# mean of all GCpct (*) should be closer to the whole genome average GC, should it?
library(ggplot2);
G <- ggplot(GC_w100, aes(x=NUCpos, y=GCpct)) +
geom_line(colour = "blue") +
theme_bw() +
geom_hline(yintercept=GC_avg, colour="red", linetype="dashed", size=1.5) +
ggtitle("E.coli GC content over the genome (window length = 100bp)") +
labs(x="Genomic Coords (bp)", y="%GC Content");
ggsave("images/Ecol_genomegcanalysis_wlen100.png",
plot=G, width=25, height=8, units="cm", dpi=600);
ggsave("images/Ecol_genomegcanalysis_wlen100.png", plot=G, width=25, height=8, units="cm", dpi=600);
getwd()
getwd()
getwd()
getwd()
getwd()
library(ggplot2)
setwd("~/Escritorio/Computational_genomics/exercise_02/stats")
getwd()
x<-read.csv(data='table_j.csv')
x
table_j <- read.table("~/Escritorio/Computational_genomics/exercise_02/stats/table_j.csv", quote="\"", comment.char="")
View(table_j)
View(file)
kr<-reshape2::melt(
table_j,
id.vars=c("Data","Specie"),
variable.name = "count",
value.name="score"
)
kr<-reshape2::melt(
table_j,
id.vars=c("V1","V2"),
variable.name = "count",
value.name="score"
)
kr
View(kr)
ggplot(data=kre, aes(V1, count, color=V2))+geom_bar()
ggplot(data=kr, aes(V1, count, color=V2))+geom_bar()
ggplot(data=kr, aes(V1, count, color=V2))+geom_point()
ggplot(data=kr, aes(V1, count, color=V2))+geom_histogram()
ggplot(data=kr, aes(V1, as.factor(count), color=V2))+geom_histogram()
ggplot(data=kr, aes(score, as.factor(V1), color=V2))+geom_histogram()
ggplot(data=kr, aes(score, as.factor(V1), fill=V2))+geom_histogram()
ggplot(data=kr, aes(as.factor(V1), score, fill=V2))+geom_histogram()
class(kr$V1)
class(kr$V2)
class(kr$count)
class(kr$score)
ggplot(data=kr, aes(V1, score, fill=V2))+geom_histogram()
kr<-reshape2::gather(
table_j,
id.vars=c("V1","V2"),
variable.name = "count",
value.name="score"
)
kr<-reshape2::melt(
table_j,
id.vars=c("V1","V2"),
variable.name = "count",
value.name="score"
)
kr
ggplot(data=kr, aes(V1, score, fill=V2))+geom_histogram()
ggplot(data=kr, aes(V1, score, fill=V2))+geom_point()
ggplot(data=kr, aes(V1, score, fill=count))+geom_point()
ggplot(data=kr, aes(V1, score, fill=count))+geom_bar()
ggplot(data=kr, aes(V2, score, fill=V1))+geom_bar()
ggplot(data=kr, aes(V2, score, fill=V1))+geom_point()
ggplot(data=kr, aes(V2, score, colour=V1))+geom_point()
ggplot(data=kr, aes(V1, score, colour=V2))+geom_point()
ggplot(data=kr, aes(V1, score, colour=V2))+geom_bar()
ggplot(data=kr, aes(V1, score, colour=V2))+geom_boxplot()
ggplot(data=kr, aes(V1, score, fill=V2))+geom_boxplot()
table_j <- read.table("~/Escritorio/Computational_genomics/exercise_02/stats/table_j.csv", quote="\"", comment.char="")
View(table_j)
table_j <- read.table("~/Escritorio/Computational_genomics/exercise_02/stats/table_j.csv", quote="\"", comment.char="")
View(table_j)
kr<-reshape2::melt(
table_j,
id.vars=c("V1","V2"),
variable.name = "Count",
value.name="Score"
)
ggplot(data=kr, aes(V1, score, fill=V2))+geom_boxplot()
ggplot(data=kr, aes(V1, Score, fill=V2))+geom_boxplot()
ggplot(data=kr, aes(V1, Score, fill=V2))+geom_bar()
ggplot(data=kr, aes(V1, Score, fill=V2))+geom_boxplot()
ggplot(kr, aes(x = factor(V2), fill=factor(V1)))
a+geom_bar(position='dodge')
a+geom_bar()
a<-ggplot(kr, aes(x = factor(V1), fill=factor(V2)))
a+geom_bar()
a<-ggplot(kr, aes(x = factor(V1), fill=V2))
a+geom_bar()
a+geom_bar()+geom_text(stat='count', aes(label=..count..), position="stack")
a<-ggplot(kr, aes(x = factor(V1), y=score))
a+geom_boxplot(aes(fill=V2))
a<-ggplot(kr, aes(x = factor(V1), y=Score))
a+geom_boxplot(aes(fill=V2))
a+geom_boxplot(aes(fill=V2))+
facet_grid(cols=vars(V2))
b<-ggplot(kr, aes(x = factor(V1), y=Score))+geom_boxplot(aes(fill=V3))+
facet_grid(cols=vars(V2))
b
b<-ggplot(kr, aes(x = factor(V1), y=Score))+geom_boxplot(aes(fill=Count))+
facet_grid(cols=vars(V2))
b
b<-ggplot(kr, aes(x = factor(V1), y=Score))+geom_point(aes(fill=Count))+
facet_grid(cols=vars(V2))
b
b<-ggplot(kr, aes(x = factor(V1), y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(V2))
b
b<-ggplot(kr, aes(x = factor(V1), y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(V2))+ scale_fill_discrete(name = "Type", labels = c("Unique", "Distinct", "Total"))
b
b<-ggplot(kr, aes(x = factor(V1), y=Score))+geom_point(aes(colour=Count), labels = c("Unique", "Distinct", "Total"))+
facet_grid(cols=vars(V2))+ scale_fill_discrete(name = "Type", labels = c("Unique", "Distinct", "Total"))
colnames(table_j)
table_j <- read.table("~/Escritorio/Computational_genomics/exercise_02/stats/table_j.csv", quote="\"", comment.char="")
View(table_j)
colnames(table_j)<-c("Species","Kmers","Uique","Total", "Max_count")
colnames(table_j)<-c("Species","Kmers","Unique","Distinct","Total", "Max_count")
kr<-reshape2::melt(
table_j,
id.vars=c("Species","Kmers"),
variable.name = "Count",
value.name="Score"
)
kr
a<-ggplot(kr, aes(x = factor(Species), y=Score))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
b<-ggplot(kr, aes(x = factor(Species), y=Score))+geom_point(aes(colour=Count), labels = c("Unique", "Distinct", "Total"))+
facet_grid(cols=vars(Kmers))+ scale_fill_discrete(name = "Type", labels = c("Unique", "Distinct", "Total"))
b<-ggplot(kr, aes(x = factor(Species), y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
View(kr)
View(kr)
kr2 <-kr[!grepl("Max_count", kr$Count),]
kr2
b<-ggplot(kr2, aes(x = factor(Species), y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
b<-ggplot(kr2, aes(x = factor(Species), y=Score))+geom_boxplot(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
b<-ggplot(kr2, aes(x = factor(Species), y=Score))+geom_bar(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
b<-ggplot(kr2, aes(x = factor(Species), y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
a<-ggplot(kr2, aes(x = factor(Species), y=Score))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Count))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Kmers, colour=Count))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Kmers, group=Count))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Kmers, group=Species))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))+geom_point(aes(fill=Count))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))+geom_point(aes(Count))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))+geom_point(aes(y=Count))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))+geom_point(aes(x=factor(Species),y=Count))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
b<-ggplot(kr2, aes(x = factor(Species), y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
a<-ggplot(kr2, aes(x = Species, y=Score))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
kr2 <-kr[!grepl("Max_count", kr$Count),]
kr2
b<-ggplot(kr2, aes(x = Species, y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
b<-ggplot(kr2, aes(x = Species, y=log10(Score)))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
a<-ggplot(kr2, aes(x = Species, y=log10(Score)))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
a<-ggplot(kr2, aes(x = Species, y=Score))
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
kr2 <-kr[!grepl("Max_count", kr$Count),]
kr2
b<-ggplot(kr2, aes(x = Species, y=log10(Score)))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
b<-ggplot(kr2, aes(x = Species, y=Score))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
b<-ggplot(kr2, aes(x = Species, y=log10(Score)))+geom_point(aes(colour=Count))+
facet_grid(cols=vars(Kmers))
b
a+geom_boxplot(aes(fill=Kmers))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Count))+
facet_grid(cols=vars(Kmers))
a+geom_boxplot(aes(fill=Species))+
facet_grid(cols=vars(Kmers))
